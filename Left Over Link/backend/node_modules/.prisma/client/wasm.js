
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  role: 'role',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  phone: 'phone',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  registrationDocUrl: 'registrationDocUrl',
  reputation: 'reputation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  emailVerifyToken: 'emailVerifyToken'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  restaurantId: 'restaurantId',
  items: 'items',
  portions: 'portions',
  pickupStart: 'pickupStart',
  pickupEnd: 'pickupEnd',
  location: 'location',
  images: 'images',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClaimScalarFieldEnum = {
  id: 'id',
  donationId: 'donationId',
  ngoId: 'ngoId',
  requestTime: 'requestTime',
  confirmTime: 'confirmTime',
  pickupTime: 'pickupTime',
  status: 'status',
  proofUrl: 'proofUrl'
};

exports.Prisma.PointScalarFieldEnum = {
  id: 'id',
  restaurantId: 'restaurantId',
  claimId: 'claimId',
  points: 'points',
  reason: 'reason',
  timestamp: 'timestamp'
};

exports.Prisma.AdminLogScalarFieldEnum = {
  id: 'id',
  actorId: 'actorId',
  action: 'action',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  RESTAURANT: 'RESTAURANT',
  NGO: 'NGO',
  ADMIN: 'ADMIN'
};

exports.DonationStatus = exports.$Enums.DonationStatus = {
  AVAILABLE: 'AVAILABLE',
  CLAIMED: 'CLAIMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ClaimStatus = exports.$Enums.ClaimStatus = {
  REQUESTED: 'REQUESTED',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Donation: 'Donation',
  Claim: 'Claim',
  Point: 'Point',
  AdminLog: 'AdminLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Admin\\OneDrive\\Left Over Link\\backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Admin\\OneDrive\\Left Over Link\\backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                 String   @id @default(cuid())\n  role               Role\n  name               String\n  email              String   @unique\n  passwordHash       String\n  phone              String   @unique\n  emailVerified      Boolean  @default(false)\n  phoneVerified      Boolean  @default(false)\n  registrationDocUrl String? // For NGOs\n  reputation         Int      @default(0) // For NGOs\n  createdAt          DateTime @default(now())\n  updatedAt          DateTime @updatedAt\n\n  // Restaurant fields\n  donations Donation[]\n  points    Point[]\n\n  // NGO fields\n  claims Claim[]\n\n  // Admin fields\n  logs AdminLog[]\n\n  // Tokens\n  emailVerifyToken String? @unique\n}\n\nmodel Donation {\n  id           String         @id @default(cuid())\n  restaurant   User           @relation(fields: [restaurantId], references: [id])\n  restaurantId String\n  items        Json // e.g., [{\"name\": \"Bread\", \"quantity\": \"10 loaves\"}]\n  portions     Int\n  pickupStart  DateTime\n  pickupEnd    DateTime\n  location     Json // e.g., {\"lat\": 12.34, \"lng\": 56.78, \"address\": \"123 Main St\"}\n  images       String[] // Array of URLs\n  status       DonationStatus @default(AVAILABLE)\n  createdAt    DateTime       @default(now())\n  updatedAt    DateTime       @updatedAt\n\n  claims Claim[]\n}\n\nmodel Claim {\n  id          String      @id @default(cuid())\n  donation    Donation    @relation(fields: [donationId], references: [id])\n  donationId  String\n  ngo         User        @relation(fields: [ngoId], references: [id])\n  ngoId       String\n  requestTime DateTime    @default(now())\n  confirmTime DateTime?\n  pickupTime  DateTime?\n  status      ClaimStatus @default(REQUESTED)\n  proofUrl    String? // URL to image/doc of completion\n  point       Point?\n\n  @@unique([donationId, ngoId]) // An NGO can only claim a donation once\n}\n\nmodel Point {\n  id           String   @id @default(cuid())\n  restaurant   User     @relation(fields: [restaurantId], references: [id])\n  restaurantId String\n  claim        Claim    @relation(fields: [claimId], references: [id])\n  claimId      String   @unique\n  points       Int\n  reason       String // e.g., \"Donation of 50 portions\"\n  timestamp    DateTime @default(now())\n}\n\nmodel AdminLog {\n  id        String   @id @default(cuid())\n  actor     User     @relation(fields: [actorId], references: [id])\n  actorId   String\n  action    String // e.g., \"VERIFY_NGO\", \"DELETE_DONATION\"\n  details   Json\n  timestamp DateTime @default(now())\n}\n\nenum Role {\n  RESTAURANT\n  NGO\n  ADMIN\n}\n\nenum DonationStatus {\n  AVAILABLE\n  CLAIMED\n  COMPLETED\n  CANCELLED\n}\n\nenum ClaimStatus {\n  REQUESTED\n  CONFIRMED\n  COMPLETED\n  REJECTED\n}\n",
  "inlineSchemaHash": "04302c85452b1d2a3f29be872524c7985d4361b488db9c58f6cf15ab4ce4a098",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"phoneVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"registrationDocUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reputation\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"donations\",\"kind\":\"object\",\"type\":\"Donation\",\"relationName\":\"DonationToUser\"},{\"name\":\"points\",\"kind\":\"object\",\"type\":\"Point\",\"relationName\":\"PointToUser\"},{\"name\":\"claims\",\"kind\":\"object\",\"type\":\"Claim\",\"relationName\":\"ClaimToUser\"},{\"name\":\"logs\",\"kind\":\"object\",\"type\":\"AdminLog\",\"relationName\":\"AdminLogToUser\"},{\"name\":\"emailVerifyToken\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Donation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"restaurant\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DonationToUser\"},{\"name\":\"restaurantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"items\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"portions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"pickupStart\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"pickupEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"DonationStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"claims\",\"kind\":\"object\",\"type\":\"Claim\",\"relationName\":\"ClaimToDonation\"}],\"dbName\":null},\"Claim\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"donation\",\"kind\":\"object\",\"type\":\"Donation\",\"relationName\":\"ClaimToDonation\"},{\"name\":\"donationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ngo\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClaimToUser\"},{\"name\":\"ngoId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"requestTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"confirmTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"pickupTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ClaimStatus\"},{\"name\":\"proofUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"point\",\"kind\":\"object\",\"type\":\"Point\",\"relationName\":\"ClaimToPoint\"}],\"dbName\":null},\"Point\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"restaurant\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PointToUser\"},{\"name\":\"restaurantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claim\",\"kind\":\"object\",\"type\":\"Claim\",\"relationName\":\"ClaimToPoint\"},{\"name\":\"claimId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"AdminLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AdminLogToUser\"},{\"name\":\"actorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

